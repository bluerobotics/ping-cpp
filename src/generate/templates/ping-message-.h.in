// C++ implementation of the Blue Robotics 'Ping' binary message protocol

//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!
// THIS IS AN AUTOGENERATED FILE
// DO NOT EDIT
//~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!~!

#pragma once

#include "ping-message.h"

// TODO: should maybe be an enum
namespace {{definition|capitalize}}Id
{
{% for message_type in messages %}
{% for message in messages[message_type] %}
{% set m = messages[message_type][message] %}
{% set class_name = "%s_%s" % (definition, message) %}
    static const uint16_t {{message|upper}} = {{m.id}};
{% endfor %}
{% endfor %}
}

{% for message_type in messages %}
{% for message in messages[message_type] %}
{% set m = messages[message_type][message] %}
{% set total_payload = generator.calc_payload(m.payload) %}
{% set class_name = "%s_%s" % (definition, message) %}
class {{class_name}} : public ping_message
{
public:
    {{class_name}}(const ping_message& msg) : ping_message { msg } {}
    {{class_name}}(uint8_t* buf) : ping_message { buf, {{8 + total_payload + 2}} } {}
    {{class_name}}(const uint8_t* buf, const uint16_t length) : ping_message { buf, length } {}
    {{class_name}}(
{%- for payload in m.payload %}
{% if generator.is_vector(payload.type) %}
{% if payload.vector.sizetype -%}
            {{generator.get_type_string(payload.vector.sizetype)}} {{payload.name}}_length
{% else -%}
            uint16_t {{payload.name}}_length
{%- endif %}
{% endif %}
{% endfor %}{# each payload field #}
) : ping_message { static_cast<uint16_t>({{8 + total_payload + 2}}
{%- for payload in m.payload %}
{% if generator.is_vector(payload.type) %}
 + {{payload.name}}_length
{%- endif %}
{% endfor %}) }{# each payload field #}

    {
        msgData[0] = 'B';
        msgData[1] = 'R';
        reinterpret_cast<uint16_t&>(msgData[2]) = static_cast<uint16_t>({{total_payload}}
{%- for payload in m.payload %}
{% if generator.is_vector(payload.type) %}
 + {{payload.name}}_length
{%- endif %}
{% endfor %}); // payload size
        reinterpret_cast<uint16_t&>(msgData[4]) = {{m.id}}; // ID
        msgData[6] = 0;
        msgData[7] = 0;
    }

{% set byte = namespace(offset=0, func='') %}
{% if m.payload %}
{% for payload in m.payload %}
{% if generator.is_vector(payload.type) %}
{% if payload.vector.sizetype %}
    {{generator.get_type_string(payload.vector.sizetype)}} {{payload.name}}_length() const { return reinterpret_cast<{{generator.get_type_string(payload.vector.sizetype)}}&>(msgData[headerLength + {{byte.offset}}]); }
    //TODO do this in constructor (const)
    void set_{{payload.name}}_length(const {{generator.get_type_string(payload.vector.sizetype)}} {{payload.name}}_length) { reinterpret_cast<{{generator.get_type_string(payload.vector.sizetype)}}&>(msgData[headerLength + {{byte.offset}}]) = {{payload.name}}_length;}
{% set byte.offset = byte.offset + generator.get_c_size(payload.vector.sizetype) %}
{% endif %}
    {{generator.get_type_string(payload.vector.datatype)}}* {{payload.name}}() const { return reinterpret_cast<{{generator.get_type_string(payload.vector.datatype)}}*>(msgData+headerLength+{{byte.offset}}); }
    void set_{{payload.name}}_at(const uint16_t i, const {{generator.get_type_string(payload.vector.datatype)}} data) { reinterpret_cast<{{generator.get_type_string(payload.vector.datatype)}}&>(msgData[headerLength + {{byte.offset}} + i]) = data; }
{% else %}
    {{generator.get_type_string(payload.type)}} {{payload.name}}() const { return reinterpret_cast<{{generator.get_type_string(payload.type)}}&>(msgData[headerLength + {{byte.offset}}]); }
    void set_{{payload.name}}(const {{generator.get_type_string(payload.type)}} {{payload.name}}) { reinterpret_cast<{{generator.get_type_string(payload.type)}}&>(msgData[headerLength + {{byte.offset}}]) = {{payload.name}}; }
{% set byte.offset = byte.offset + generator.get_c_size(payload.type) %}
{% endif %}
{% endfor %}
{% endif %}
{% if m.payload %}

    int getMessageAsString(char* string, size_t size) const {
        int written = ping_message::getMessageAsString(string, size);
        if (written > 0 && written < static_cast<int>(size)) {
            return snprintf(string + written, size - static_cast<size_t>(written),
{% for payload in m.payload %}
{% if generator.is_vector(payload.type) %}
{% if payload.vector.sizetype %}
{% else %}
                "  {{payload.name}}: %s\n"
{% endif %}
{% else %}
                "  {{payload.name}}: %" {{generator.get_printf_format(payload.type)}} "\n"
{% endif %}
{% endfor %}
{% for payload in m.payload %}
{% if generator.is_vector(payload.type) %}
{% if payload.vector.sizetype %}
{% else %}
                , {{payload.name}}()
{% endif %}
{% else %}
                , {{payload.name}}()
{% endif %}
{% endfor %}
            );
        }
        return written;
    }
{% endif %}
};

{% endfor %}
{% endfor %}
